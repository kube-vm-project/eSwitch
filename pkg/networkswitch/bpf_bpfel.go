// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package networkswitch

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type bpfFdbKey struct {
	Mac  uint64
	Vlan uint16
}

type bpfFdbVal struct {
	IfaceIndex uint16
	Ktimestamp uint64
	Tagged     bool
}

type bpfPortCfg struct {
	IfIndex          uint16
	Pvid             uint16
	VlanBitmask      [64]uint64
	Mac              [6]uint8
	Transparent      uint16
	IngressFiltering uint16
	HookDrop         uint16
	HookEgress       uint16
	Tap              uint16
}

type bpfTrafficKey struct {
	SrcIpv4       uint32
	DstIpv4       uint32
	Vlan          uint16
	ProtoL2       uint16
	ProtoL3       uint16
	TargetIfIndex uint16
}

type bpfTrafficStats struct {
	Timestamp           uint64
	Tagged              uint8
	Size                uint16
	RxDroppedBytes      uint64
	RxDroppedPackets    uint64
	RxPassedBytes       uint64
	RxPassedPackets     uint64
	RxRedirectedBytes   uint64
	RxRedirectedPackets uint64
}

type bpfXdpStats struct {
	RxDroppedBytes      uint64
	RxDroppedPackets    uint64
	RxPassedBytes       uint64
	RxPassedPackets     uint64
	RxRedirectedBytes   uint64
	RxRedirectedPackets uint64
	RxLastTimestamp     uint64
	TxRedirectedBytes   uint64
	TxRedirectedPackets uint64
	TxLastTimestamp     uint64
}

// loadBpf returns the embedded CollectionSpec for bpf.
func loadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bpf: %w", err)
	}

	return spec, err
}

// loadBpfObjects loads bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*bpfObjects
//	*bpfPrograms
//	*bpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfSpecs struct {
	bpfProgramSpecs
	bpfMapSpecs
	bpfVariableSpecs
}

// bpfProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfProgramSpecs struct {
	ProgEgressTc  *ebpf.ProgramSpec `ebpf:"Prog_egress_tc"`
	ProgTc        *ebpf.ProgramSpec `ebpf:"Prog_tc"`
	ProgXdp       *ebpf.ProgramSpec `ebpf:"Prog_xdp"`
	HookDropTc    *ebpf.ProgramSpec `ebpf:"hook_drop_tc"`
	HookDropXdp   *ebpf.ProgramSpec `ebpf:"hook_drop_xdp"`
	HookEgressTc  *ebpf.ProgramSpec `ebpf:"hook_egress_tc"`
	HookEgressXdp *ebpf.ProgramSpec `ebpf:"hook_egress_xdp"`
	HookRouteXdp  *ebpf.ProgramSpec `ebpf:"hook_route_xdp"`
	TailCall1     *ebpf.ProgramSpec `ebpf:"tail_call1"`
	TailCall1B    *ebpf.ProgramSpec `ebpf:"tail_call1B"`
	TailCall2     *ebpf.ProgramSpec `ebpf:"tail_call2"`
	TailCall2B    *ebpf.ProgramSpec `ebpf:"tail_call2B"`
}

// bpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfMapSpecs struct {
	MapFdbXdp       *ebpf.MapSpec `ebpf:"Map_fdb_xdp"`
	MapJumpTableTc  *ebpf.MapSpec `ebpf:"Map_jump_table_tc"`
	MapJumpTableXdp *ebpf.MapSpec `ebpf:"Map_jump_table_xdp"`
	MapStatsTraffic *ebpf.MapSpec `ebpf:"Map_stats_traffic"`
	MapStatsXdp     *ebpf.MapSpec `ebpf:"Map_stats_xdp"`
}

// bpfVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfVariableSpecs struct {
	PORTS_CFG_BY_IDX *ebpf.VariableSpec `ebpf:"PORTS_CFG_BY_IDX"`
	PORTS_IDX        *ebpf.VariableSpec `ebpf:"PORTS_IDX"`
	PORT_CFG         *ebpf.VariableSpec `ebpf:"PORT_CFG"`
	PORT_COUNT       *ebpf.VariableSpec `ebpf:"PORT_COUNT"`
	STATS_ENABLED    *ebpf.VariableSpec `ebpf:"STATS_ENABLED"`
}

// bpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfObjects struct {
	bpfPrograms
	bpfMaps
	bpfVariables
}

func (o *bpfObjects) Close() error {
	return _BpfClose(
		&o.bpfPrograms,
		&o.bpfMaps,
	)
}

// bpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfMaps struct {
	MapFdbXdp       *ebpf.Map `ebpf:"Map_fdb_xdp"`
	MapJumpTableTc  *ebpf.Map `ebpf:"Map_jump_table_tc"`
	MapJumpTableXdp *ebpf.Map `ebpf:"Map_jump_table_xdp"`
	MapStatsTraffic *ebpf.Map `ebpf:"Map_stats_traffic"`
	MapStatsXdp     *ebpf.Map `ebpf:"Map_stats_xdp"`
}

func (m *bpfMaps) Close() error {
	return _BpfClose(
		m.MapFdbXdp,
		m.MapJumpTableTc,
		m.MapJumpTableXdp,
		m.MapStatsTraffic,
		m.MapStatsXdp,
	)
}

// bpfVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfVariables struct {
	PORTS_CFG_BY_IDX *ebpf.Variable `ebpf:"PORTS_CFG_BY_IDX"`
	PORTS_IDX        *ebpf.Variable `ebpf:"PORTS_IDX"`
	PORT_CFG         *ebpf.Variable `ebpf:"PORT_CFG"`
	PORT_COUNT       *ebpf.Variable `ebpf:"PORT_COUNT"`
	STATS_ENABLED    *ebpf.Variable `ebpf:"STATS_ENABLED"`
}

// bpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfPrograms struct {
	ProgEgressTc  *ebpf.Program `ebpf:"Prog_egress_tc"`
	ProgTc        *ebpf.Program `ebpf:"Prog_tc"`
	ProgXdp       *ebpf.Program `ebpf:"Prog_xdp"`
	HookDropTc    *ebpf.Program `ebpf:"hook_drop_tc"`
	HookDropXdp   *ebpf.Program `ebpf:"hook_drop_xdp"`
	HookEgressTc  *ebpf.Program `ebpf:"hook_egress_tc"`
	HookEgressXdp *ebpf.Program `ebpf:"hook_egress_xdp"`
	HookRouteXdp  *ebpf.Program `ebpf:"hook_route_xdp"`
	TailCall1     *ebpf.Program `ebpf:"tail_call1"`
	TailCall1B    *ebpf.Program `ebpf:"tail_call1B"`
	TailCall2     *ebpf.Program `ebpf:"tail_call2"`
	TailCall2B    *ebpf.Program `ebpf:"tail_call2B"`
}

func (p *bpfPrograms) Close() error {
	return _BpfClose(
		p.ProgEgressTc,
		p.ProgTc,
		p.ProgXdp,
		p.HookDropTc,
		p.HookDropXdp,
		p.HookEgressTc,
		p.HookEgressXdp,
		p.HookRouteXdp,
		p.TailCall1,
		p.TailCall1B,
		p.TailCall2,
		p.TailCall2B,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_bpfel.o
var _BpfBytes []byte
